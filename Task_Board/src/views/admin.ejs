<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tela Administrativa</title>
    <link href="/css/admin.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <header>
        <h1>📌 Tela Administrativa</h1>
    </header>

    <form class="task-form" method="POST" action="/submit-task">
        <label for="task">Tarefa:</label>
        <input type="text" id="task" name="task" placeholder="Digite a nova tarefa..." required>
        <div id="error-message" class="error-message"></div>
        <button type="submit" class="submit-button">✅ Adicionar Tarefa</button>
    </form>

    <div id="notification" class="notification-hidden"></div>

    <div class="status-board">
        <div class="status-column">
            <h2>📌 Novo</h2>
            <div class="tasks-container">
                <% tasks.filter(t => t.status === 'novo').forEach(task => { %>
                    <div class="task-card" data-task-id="<%= task.id %>" data-status="novo">
                        <span class="task-content"><%= task.content %></span>
                        <div class="task-status"><%= task.status %></div>
                        <form action="/delete-task" method="POST" class="delete-form">
                            <input type="hidden" name="task" value="<%= task.content %>">
                            <button type="submit" class="delete-btn">×</button>
                        </form>
                    </div>
                <% }); %>
            </div>
        </div>

        <div class="status-column">
            <h2>⏳ Em Andamento</h2>
            <div class="tasks-container">
                <% tasks.filter(t => t.status === 'andamento').forEach(task => { %>
                    <div class="task-card" data-task-id="<%= task.id %>" data-status="andamento">
                        <span class="task-content"><%= task.content %></span>
                        <div class="task-status"><%= task.status %></div>
                        <form action="/delete-task" method="POST" class="delete-form">
                            <input type="hidden" name="task" value="<%= task.content %>">
                            <button type="submit" class="delete-btn">×</button>
                        </form>
                    </div>
                <% }); %>
            </div>
        </div>

        <div class="status-column">
            <h2>✅ Concluído</h2>
            <div class="tasks-container">
                <% tasks.filter(t => t.status === 'concluido').forEach(task => { %>
                    <div class="task-card" data-task-id="<%= task.id %>" data-status="concluido">
                        <span class="task-content"><%= task.content %></span>
                        <div class="task-status"><%= task.status %></div>
                        <form action="/delete-task" method="POST" class="delete-form">
                            <input type="hidden" name="task" value="<%= task.content %>">
                            <button type="submit" class="delete-btn">×</button>
                        </form>
                    </div>
                <% }); %>
            </div>
        </div>
    </div>

    <script>
        const socket = io();
        
        // Atualização de status em tempo real
        socket.on('task-status-updated', (data) => {
            const taskCard = document.querySelector(`[data-task-id="${data.taskId}"]`);
            if(taskCard) {
                // Atualiza o status exibido
                const statusElement = taskCard.querySelector('.task-status');
                if(statusElement) {
                    statusElement.textContent = data.newStatus;
                    taskCard.dataset.status = data.newStatus;
                }
                
                // Move para a coluna correta
                const newColumn = document.querySelector(
                    `.status-column h2:contains('${getStatusEmoji(data.newStatus)}')`
                )?.closest('.status-column');
                
                if(newColumn) {
                    const targetContainer = newColumn.querySelector('.tasks-container');
                    const existingCard = targetContainer.querySelector(`[data-task-id="${data.taskId}"]`);
                    
                    if(!existingCard) {
                        taskCard.classList.add('task-card-updating');
                        targetContainer.prepend(taskCard);
                        setTimeout(() => {
                            taskCard.classList.remove('task-card-updating');
                        }, 400);
                    }
                }
            }
        });

        // Nova tarefa em tempo real
        socket.on('new-task', (task) => {
            const column = document.querySelector('.status-column h2:contains("📌")')
                          .closest('.status-column').querySelector('.tasks-container');
            
            const newCard = document.createElement('div');
            newCard.className = 'task-card new-task';
            newCard.dataset.taskId = task.id;
            newCard.dataset.status = task.status;
            newCard.innerHTML = `
                <span class="task-content">${task.content}</span>
                <div class="task-status">${task.status}</div>
                <form action="/delete-task" method="POST" class="delete-form">
                    <input type="hidden" name="task" value="${task.content}">
                    <button type="submit" class="delete-btn">×</button>
                </form>
            `;
            column.prepend(newCard);
        });

        // Exclusão de tarefa
        socket.on('task-deleted', (task) => {
            const cards = document.querySelectorAll('.task-card');
            cards.forEach(card => {
                if(card.textContent.includes(task.content)) {
                    card.remove();
                }
            });
        });

        // Notificações
        socket.on('notification', (data) => {
            const notification = document.getElementById('notification');
            notification.textContent = data.message;
            notification.className = `notification-${data.type}`;
            
            setTimeout(() => {
                notification.className = 'notification-hidden';
            }, 3000);
        });

        // Função auxiliar para obter emoji do status
        function getStatusEmoji(status) {
            const emojis = {
                novo: '📌',
                andamento: '⏳',
                concluido: '✅'
            };
            return emojis[status] || '';
        }
    </script>
</body>
</html>
