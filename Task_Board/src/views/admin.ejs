<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tela Administrativa</title>
    <link href="/css/admin.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <header>
        <h1>📌 Tela Administrativa</h1>
    </header>

    <form class="task-form" method="POST" action="/submit-task">
        <label for="task">Nova Tarefa:</label>
        <input type="text" id="task" name="task" placeholder="Digite a nova tarefa..." required>
        
        <label for="due_date">Data Limite:</label>
        <input type="datetime-local" id="due_date" name="due_date">
        
        <div id="error-message" class="error-message"></div>
        <button type="submit" class="submit-button">✅ Adicionar Tarefa</button>
    </form>

    <div id="notification" class="notification-hidden"></div>

    <div class="task-list-container">
        <h2 class="list-title">Todas as Tarefas</h2>
        <div class="task-list-header">
            <span class="header-item task-content-header">Tarefa</span>
            <span class="header-item status-header">Status</span>
            <span class="header-item actions-header">Ações</span>
        </div>
        
        <div class="task-list">
            <% tasks.forEach(task => { %>
                <div class="task-item" data-task-id="<%= task.id %>">
                    <div>
                        <span class="task-content"><%= task.content %></span>
                        <% if (task.due_date) { %>
                            <div class="task-due 
                                <%= task.status !== 'concluido' && new Date(task.due_date) < new Date() ? 'urgent' : '' %> 
                                <%= task.status !== 'concluido' && new Date(task.due_date) <= new Date(new Date().getTime() + 24 * 60 * 60 * 1000) ? 'warning' : '' %>" 
                                data-due-date="<%= new Date(task.due_date).toISOString() %>">
                                📅 Limite: <%= new Date(task.due_date).toLocaleString('pt-BR') %>
                            </div>
                        <% } %>
                    </div>
                    <span class="task-status status-<%= task.status %>"><%= task.status %></span>
                    <form action="/delete-task" method="POST" class="delete-form">
                        <input type="hidden" name="task" value="<%= task.content %>">
                        <button type="submit" class="delete-btn" <%= task.status === 'concluido' ? 'disabled title="Tarefas concluídas não podem ser excluídas"' : '' %>>× Excluir</button>
                    </form>
                </div>
            <% }); %>
        </div>
    </div>

    <script>
        const socket = io();

        // Verificar prazos e aplicar estilos
        function checkDueDates() {
            document.querySelectorAll('.task-item').forEach(item => {
                const statusElement = item.querySelector('.task-status');
                const dueElement = item.querySelector('.task-due');
                
                // Ignora tarefas concluídas
                if (statusElement && statusElement.textContent === 'concluido') {
                    if (dueElement) {
                        dueElement.classList.remove('warning', 'urgent');
                    }
                    return;
                }

                if (!dueElement) return;
                
                const dueDate = new Date(dueElement.dataset.dueDate);
                const now = new Date();
                const taskContent = item.querySelector('.task-content').textContent;
                
                // Remove classes anteriores
                dueElement.classList.remove('warning', 'urgent');
                
                // Verifica prazos apenas para tarefas não concluídas
                if (dueDate <= now) {
                    dueElement.classList.add('urgent');
                    if (!item.dataset.urgentShown) {
                        showNotification(`⚠️ A tarefa "${taskContent}" está atrasada!`, 'error');
                        item.dataset.urgentShown = 'true';
                    }
                } else if (dueDate <= new Date(now.getTime() + 24 * 60 * 60 * 1000)) {
                    dueElement.classList.add('warning');
                    if (!item.dataset.warningShown) {
                        showNotification(`⏳ A tarefa "${taskContent}" está perto do prazo!`, 'warning');
                        item.dataset.warningShown = 'true';
                    }
                }
            });
        }

        // Mostrar notificação
        function showNotification(message, type) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification-${type}`;
            
            setTimeout(() => {
                notification.className = 'notification-hidden';
            }, 5000);
        }

        // Verificar prazos periodicamente
        setInterval(checkDueDates, 60000);
        document.addEventListener('DOMContentLoaded', checkDueDates);

        // Eventos Socket.IO
        socket.on('task-status-updated', (data) => {
            const taskItem = document.querySelector(`[data-task-id="${data.taskId}"]`);
            if(taskItem) {
                const statusElement = taskItem.querySelector('.task-status');
                const deleteBtn = taskItem.querySelector('.delete-btn');
                
                if(statusElement) {
                    statusElement.textContent = data.newStatus;
                    statusElement.className = `task-status status-${data.newStatus}`;
                }
                
                if(deleteBtn) {
                    if(data.newStatus === 'concluido') {
                        deleteBtn.disabled = true;
                        deleteBtn.style.opacity = '0.5';
                        deleteBtn.style.cursor = 'not-allowed';
                        deleteBtn.title = 'Tarefas concluídas não podem ser excluídas';
                    } else {
                        deleteBtn.disabled = false;
                        deleteBtn.style.opacity = '1';
                        deleteBtn.style.cursor = 'pointer';
                        deleteBtn.title = '';
                    }
                }
            }
        });

        socket.on('new-task', (task) => {
            const taskList = document.querySelector('.task-list');
            const newItem = document.createElement('div');
            newItem.className = 'task-item';
            newItem.dataset.taskId = task.id;
            
            let dueDateHtml = '';
            if (task.due_date) {
                const dueDate = new Date(task.due_date);
                dueDateHtml = `<div class="task-due" data-due-date="${dueDate.toISOString()}">
                    📅 Limite: ${dueDate.toLocaleString('pt-BR')}
                </div>`;
            }
            
            newItem.innerHTML = `
                <div>
                    <span class="task-content">${task.content}</span>
                    ${dueDateHtml}
                </div>
                <span class="task-status status-${task.status}">${task.status}</span>
                <form action="/delete-task" method="POST" class="delete-form">
                    <input type="hidden" name="task" value="${task.content}">
                    <button type="submit" class="delete-btn" ${task.status === 'concluido' ? 'disabled title="Tarefas concluídas não podem ser excluídas"' : ''}>× Excluir</button>
                </form>
            `;
            taskList.prepend(newItem);
            checkDueDates();
        });

        socket.on('task-deleted', (task) => {
            const items = document.querySelectorAll('.task-item');
            items.forEach(item => {
                if(item.textContent.includes(task.content)) {
                    item.remove();
                }
            });
        });

        socket.on('notification', (data) => {
            showNotification(data.message, data.type);
        });
    </script>
</body>
</html>